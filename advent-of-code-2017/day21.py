import numpy as np

data_input = """../.. => .../.#./.#.
#./.. => .../#../#..
##/.. => #.#/.#./.#.
.#/#. => ##./##./...
##/#. => .##/###/#..
##/## => .##/#../##."""
data = [line.split(" => ") for line in data_input.split("\n")]

D2_keys = []
D2_values = []
for i in data:
    a = i[0]
    b = i[1]
    key = np.matrix([list(a[0:2]), list(a[3:])]) == "#"

    value = np.matrix([list(b[0:3]), list(b[4:7]), list(b[8:])]) == "#"

    D2_keys.append(
        set(
            [
                str(x)
                for x in [
                    key,
                    np.rot90(key, 1),
                    np.rot90(key, 2),
                    np.rot90(key, 3),
                    np.fliplr(key),
                    np.rot90(np.fliplr(key), 1),
                    np.rot90(np.fliplr(key), 2),
                    np.rot90(np.fliplr(key), 3),
                ]
            ]
        )
    )

    D2_values.append(value)

data_input = """.../.../... => .#.#/###./##.#/###.
#../.../... => #.#./..#./..../#.#.
.#./.../... => #.##/..#./.#.#/####
##./.../... => ###./.#../####/##..
#.#/.../... => ...#/####/#.##/...#
###/.../... => .#../..#./#..#/..#.
.#./#../... => ###./.##./#.../..#.
##./#../... => #.#./...#/..../.###
..#/#../... => ..../..../##../#..#
#.#/#../... => ..#./#..#/.#../..##
.##/#../... => ##../.#.#/.##./...#
###/#../... => ..../#.../#..#/#..#
.../.#./... => ##.#/#.#./#.../#..#
#../.#./... => ..#./#.#./.##./....
.#./.#./... => ..##/#.../..../###.
##./.#./... => .#../...#/.##./.#.#
#.#/.#./... => ...#/#..#/.#../.###
###/.#./... => ###./.###/##.#/#.##
.#./##./... => ##.#/##../..##/..##
##./##./... => #.##/.###/.##./###.
..#/##./... => ##.#/.##./..##/####
#.#/##./... => ####/####/#.##/.#..
.##/##./... => ####/.#../####/#..#
###/##./... => #.#./..#./###./..#.
.../#.#/... => #.../..../.#../#.##
#../#.#/... => ..#./###./####/..#.
.#./#.#/... => #.##/.#../##.#/#.#.
##./#.#/... => ###./.###/###./##..
#.#/#.#/... => ...#/.##./.#.#/#.##
###/#.#/... => ####/#.../###./###.
.../###/... => ..##/#.##/.#../.#..
#../###/... => ..../.###/.#.#/...#
.#./###/... => #.##/.#.#/.#.#/.##.
##./###/... => #..#/.#.#/#.##/#.#.
#.#/###/... => #.../##../#.##/##.#
###/###/... => .#../.#../.###/..#.
..#/.../#.. => ...#/.##./.##./####
#.#/.../#.. => ##.#/##../#.#./.#..
.##/.../#.. => #..#/.##./####/.#..
###/.../#.. => ..../..../..##/..##
.##/#../#.. => ..##/.##./#..#/###.
###/#../#.. => ##.#/#..#/#.../#..#
..#/.#./#.. => #..#/##.#/.##./#..#
#.#/.#./#.. => .#../####/..##/#.##
.##/.#./#.. => ###./#..#/.##./###.
###/.#./#.. => ####/###./##../..##
.##/##./#.. => #.../####/...#/####
###/##./#.. => .#../#.##/.##./####
#../..#/#.. => .#../####/#.../....
.#./..#/#.. => .#.#/...#/.###/.#.#
##./..#/#.. => ..##/#..#/#..#/....
#.#/..#/#.. => .###/.#.#/.##./#.#.
.##/..#/#.. => ...#/#.##/#.../..##
###/..#/#.. => #.##/#.##/...#/#.##
#../#.#/#.. => #..#/..##/.#../.###
.#./#.#/#.. => #.##/..../.##./.#..
##./#.#/#.. => #.#./..#./.#.#/.#..
..#/#.#/#.. => ...#/#..#/###./##..
#.#/#.#/#.. => ##.#/##.#/.#.#/.#..
.##/#.#/#.. => #..#/#..#/##../.#..
###/#.#/#.. => #.##/..##/##.#/....
#../.##/#.. => ##.#/.##./...#/.#.#
.#./.##/#.. => .##./.###/###./.#.#
##./.##/#.. => #.#./#.##/..##/.#..
#.#/.##/#.. => ..#./.##./..##/.#..
.##/.##/#.. => ##../..##/#..#/#...
###/.##/#.. => ###./#..#/##.#/..#.
#../###/#.. => .###/#.../####/#.#.
.#./###/#.. => #.#./.###/#..#/....
##./###/#.. => ..#./.#.#/#.../#...
..#/###/#.. => ...#/..#./##../#..#
#.#/###/#.. => .#.#/###./.#../##..
.##/###/#.. => .#../###./..#./##..
###/###/#.. => .#../..##/#.../#...
.#./#.#/.#. => ##.#/..../##../.#..
##./#.#/.#. => #.../#.##/.###/#.##
#.#/#.#/.#. => ...#/..##/##.#/#.##
###/#.#/.#. => ...#/.#.#/###./#..#
.#./###/.#. => ...#/...#/##../#.##
##./###/.#. => ###./###./.#.#/..##
#.#/###/.#. => ..../#..#/..##/#..#
###/###/.#. => .#.#/.#.#/##../.###
#.#/..#/##. => .##./..#./##../....
###/..#/##. => ####/...#/.#.#/#...
.##/#.#/##. => ..#./...#/###./.#..
###/#.#/##. => ..../.#../.#../#.#.
#.#/.##/##. => .##./..../#.../.#.#
###/.##/##. => ..../#..#/...#/#...
.##/###/##. => #.##/##.#/#.../..#.
###/###/##. => .#../.###/###./##.#
#.#/.../#.# => .#.#/..../#..#/.#..
###/.../#.# => ##../#.##/##.#/..#.
###/#../#.# => .#.#/..../.#.#/.###
#.#/.#./#.# => ...#/..../##.#/#...
###/.#./#.# => ####/.###/#.#./#.##
###/##./#.# => #..#/.###/...#/###.
#.#/#.#/#.# => #.##/...#/.###/.##.
###/#.#/#.# => #.../.#.#/.#.#/.###
#.#/###/#.# => ##.#/##../###./#...
###/###/#.# => .##./.###/.#../..##
###/#.#/### => #.##/###./#..#/#..#
###/###/### => #.../..../#..#/#..."""
data = [line.split(" => ") for line in data_input.split("\n")]
D3_keys = []
D3_values = []
for i in data:
    a = i[0]
    b = i[1]
    key = np.matrix([list(a[0:3]), list(a[4:7]), list(a[8:])]) == "#"

    value = np.matrix([list(b[0:4]), list(b[5:9]), list(b[10:14]), list(b[15:])]) == "#"

    D3_keys.append(
        set(
            [
                str(x)
                for x in [
                    key,
                    np.rot90(key, 1),
                    np.rot90(key, 2),
                    np.rot90(key, 3),
                    np.fliplr(key),
                    np.rot90(np.fliplr(key), 1),
                    np.rot90(np.fliplr(key), 2),
                    np.rot90(np.fliplr(key), 3),
                ]
            ]
        )
    )
    D3_values.append(value)

# Part1
initial = np.matrix([[False, True, False], [False, False, True], [True, True, True]])


n = 1
while n <= 5:

    mod_2 = initial.shape[0] % 2 == 0

    if mod_2:
        columns = []
        for i in range(0, initial.shape[0], 2):
            rows = []
            for j in range(0, initial.shape[0], 2):
                item = initial[i : i + 2, j : j + 2]
                counter = 0
                for x in D2_keys:
                    for variation in x:
                        if str(variation) == str(item):
                            rows.append(D2_values[counter])
                            break
                    counter += 1

            columns.append(np.hstack(rows))
        initial = np.vstack(columns)

    else:
        columns = []
        for i in range(0, initial.shape[0], 3):
            rows = []
            for j in range(0, initial.shape[0], 3):
                item = initial[i : i + 3, j : j + 3]
                counter = 0
                for x in D3_keys:
                    for variation in x:
                        if str(variation) == str(item):
                            rows.append(D3_values[counter])
                            break
                    counter += 1

            columns.append(np.hstack(rows))
        initial = np.vstack(columns)

    n += 1
print(initial.sum())

# Part2
initial = np.matrix([[False, True, False], [False, False, True], [True, True, True]])


n = 1
while n <= 18:

    mod_2 = initial.shape[0] % 2 == 0

    if mod_2:
        columns = []
        for i in range(0, initial.shape[0], 2):
            rows = []
            for j in range(0, initial.shape[0], 2):
                item = initial[i : i + 2, j : j + 2]
                counter = 0
                jump = False
                for x in D2_keys:
                    # if jump:
                    #   break
                    if str(item) in x:
                        rows.append(D2_values[counter])
                        # jump = True
                        break
                    counter += 1

            columns.append(np.hstack(rows))
        initial = np.vstack(columns)

    else:
        columns = []
        for i in range(0, initial.shape[0], 3):
            rows = []
            for j in range(0, initial.shape[0], 3):
                item = initial[i : i + 3, j : j + 3]
                counter = 0
                jump = False
                for x in D3_keys:
                    # if jump:
                    #    break
                    if str(item) in x:
                        rows.append(D3_values[counter])
                        # jump = True
                        break

                    counter += 1

            columns.append(np.hstack(rows))
        initial = np.vstack(columns)

    n += 1
    # print(n,initial.sum())
print(initial.sum())
